import sys
sys.path.append("..")
import numpy as np
from env import adsr, cos_env
from osc import noise, sine
from biquad import biquad_filter
from instruments.utils import calc_freq, calc_delayar


def flute(note_no: int, velocity: int, gate: float, duration: float, sr: int =44100) -> np.ndarray:
    note_to_vca_depths: np.ndarray = np.array([
        [0.932, 0.042, 0.175, 0.014, 0.029, 0.008, 0.026, 0.015, 0.019, 0.010, 0.008, 0.004, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.001, 0.000, 0.001, 0.000, 0.001],
        [0.932, 0.091, 0.159, 0.021, 0.035, 0.015, 0.039, 0.016, 0.026, 0.010, 0.006, 0.004, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.001, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.001],
        [0.932, 0.150, 0.108, 0.024, 0.040, 0.026, 0.039, 0.014, 0.018, 0.009, 0.002, 0.004, 0.002, 0.003, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.165, 0.086, 0.027, 0.050, 0.033, 0.026, 0.010, 0.007, 0.007, 0.002, 0.003, 0.001, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.215, 0.095, 0.032, 0.049, 0.047, 0.015, 0.011, 0.006, 0.006, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.448, 0.116, 0.070, 0.079, 0.058, 0.010, 0.009, 0.004, 0.005, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.685, 0.149, 0.130, 0.119, 0.047, 0.012, 0.006, 0.005, 0.005, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.001, 0.001],
        [0.932, 0.594, 0.226, 0.147, 0.118, 0.046, 0.017, 0.007, 0.009, 0.004, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.001, 0.001, 0.001, 0.001],
        [0.932, 0.532, 0.267, 0.116, 0.113, 0.057, 0.020, 0.007, 0.008, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001],
        [0.932, 0.583, 0.190, 0.075, 0.074, 0.036, 0.013, 0.005, 0.004, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001],
        [0.932, 0.407, 0.128, 0.052, 0.025, 0.010, 0.005, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.213, 0.118, 0.039, 0.015, 0.006, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.156, 0.105, 0.042, 0.014, 0.004, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.128, 0.110, 0.063, 0.014, 0.004, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.092, 0.120, 0.051, 0.012, 0.004, 0.002, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.063, 0.107, 0.024, 0.007, 0.002, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.057, 0.093, 0.017, 0.004, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.068, 0.077, 0.013, 0.004, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.105, 0.051, 0.007, 0.004, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.161, 0.053, 0.005, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.176, 0.065, 0.003, 0.003, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.139, 0.049, 0.003, 0.003, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.087, 0.038, 0.002, 0.002, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.089, 0.052, 0.006, 0.004, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.194, 0.089, 0.017, 0.009, 0.003, 0.003, 0.002, 0.002, 0.001, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.248, 0.103, 0.022, 0.011, 0.004, 0.004, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.148, 0.067, 0.013, 0.006, 0.003, 0.003, 0.001, 0.001, 0.002, 0.001, 0.001, 0.001, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.070, 0.036, 0.006, 0.004, 0.002, 0.001, 0.001, 0.002, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.082, 0.030, 0.006, 0.006, 0.003, 0.001, 0.001, 0.005, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.077, 0.034, 0.007, 0.005, 0.002, 0.001, 0.002, 0.005, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.041, 0.035, 0.006, 0.005, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.020, 0.024, 0.003, 0.003, 0.002, 0.002, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.019, 0.024, 0.005, 0.003, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.019, 0.028, 0.008, 0.003, 0.002, 0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.023, 0.023, 0.006, 0.003, 0.009, 0.003, 0.002, 0.002, 0.002, 0.003, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.038, 0.029, 0.006, 0.005, 0.021, 0.005, 0.004, 0.004, 0.004, 0.006, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.005, 0.006, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.004, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.932, 0.046, 0.037, 0.007, 0.006, 0.026, 0.007, 0.005, 0.005, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000]
    ])
    N_PARTIAL: int = 30
    LOWEST_NOTE_NO: int = 59
    freq: float = calc_freq(note_no)

    vco_as: np.ndarray = np.repeat(0, N_PARTIAL)
    vco_ds: np.ndarray = np.repeat(0, N_PARTIAL)
    vco_ss: np.ndarray = np.repeat(1, N_PARTIAL)
    vco_rs: np.ndarray = np.repeat(0, N_PARTIAL)
    vco_gates: np.ndarray = np.repeat(duration, N_PARTIAL)
    vco_durs: np.ndarray = np.repeat(duration, N_PARTIAL)
    vco_offsets: np.ndarray = freq * np.arange(1, 1+N_PARTIAL)
    vco_depths: np.ndarray = np.repeat(0, N_PARTIAL)

    vca_delays: np.ndarray = calc_delayar(vco_offsets, p1=0, p2=-0.1, p3=8000/12, p4=0.2, is_delay=True)
    vca_as: np.ndarray = calc_delayar(vco_offsets, p1=0, p2=0.1, p3=8000/12, p4=0.2, is_sub=True)
    vca_ss: np.ndarray = np.repeat(1, N_PARTIAL)
    vca_rs: np.ndarray = calc_delayar(vco_offsets, p1=0, p2=0.2, p3=8000/12, p4=0.4, is_sub=True)
    vca_gates: np.ndarray = np.repeat(gate, N_PARTIAL)
    vca_durs: np.ndarray = np.repeat(duration, N_PARTIAL)
    vca_offsets: np.ndarray = np.repeat(0, N_PARTIAL)
    vca_depths: np.ndarray = note_to_vca_depths[note_no-LOWEST_NOTE_NO]

    y: np.ndarray = np.zeros(int(duration * sr))
    for i in range(N_PARTIAL):
        jitter: np.ndaray = biquad_filter(data=noise(sec=duration, sr=sr),
                                          filter_type="lowpass", fc=40, Q=1/np.sqrt(2), sr=sr)
        jitter = calc_delayar(note_no, p1=108, p2=1, p3=150/12, p4=20) * jitter / np.max(np.abs(jitter))
        vco: np.ndarray = jitter + vco_offsets[i] \
                        + vco_depths[i] * adsr(vco_as[i], vco_ds[i], vco_ss[i], vco_rs[i], vco_gates[i], vco_durs[i], sr=sr)

        shimmer: np.ndarray = biquad_filter(data=noise(sec=duration, sr=sr),
                                            filter_type="lowpass", fc=40, Q=1/np.sqrt(2), sr=sr)
        shimmer = calc_delayar(i+1, p1=1, p2=-0.3, p3=10/12, p4=0.8) * shimmer / np.max(np.abs(shimmer))
        vca: np.ndarray = vca_offsets[i] \
                        + vca_depths[i] * cos_env(vca_delays[i], vca_as[i], vca_ss[i], vca_rs[i], vca_gates[i], vca_durs[i], sr=sr)
        vca = np.maximum((1 + shimmer) * vca, 0)

        y += vca * sine(fs=vco, sr=sr, sec=duration)
    return (velocity / 127) / np.max(np.abs(y)) * y